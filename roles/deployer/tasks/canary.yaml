---
#
# Collect data.
- name: Get current deployment info
  k8s_info:
    kind: Deployment
    namespace: "{{ meta.namespace }}"
    label_selectors: "{{ deployment.labels.items() | map('join', '=') | list }}"
  register: all_deployments_data

- name: Set main vars
  set_fact:
    new_deployment_name: "{{ deployment.name }}-{{ deployment.version }}"
    all_deployments_names: "{{ all_deployments_data.resources | map(attribute='metadata.name') | list }}"

- name: Set filtered vars
  set_fact:
    old_deployments_names: "{{ all_deployments_names | reject('search', new_deployment_name) | list }}"


#
# Initial deployment.
- name: Rollout initial deployment if there is no previous version
  block:
    - name: Deploy initial deployment
      k8s:
        state: present
        definition: "{{ lookup('template', 'deployment.yaml.j2') }}"
      with_items:
        - "{{ deployment }}"
      loop_control:
        loop_var: instance
    - name: End playbook after initial deployment
      meta: end_play
  when: not all_deployments_names


#
# Rollout new deployment.
- name: Rollout new deployment if there is a previous version
  block:

    # Deploy new version.
    - name: Deploy new version with zero pods
      k8s:
        state: present
        definition: "{{ lookup('template', 'deployment.yaml.j2') }}"
      with_items:
        - "{{ deployment | combine({'replicas': 0}) }}"
      loop_control:
        loop_var: instance

    - name: Run canary steps to scale up/down new/old deployments
      include_tasks: canary_steps.yaml
      loop: "{{ steps }}"
      loop_control:
        loop_var: step
        extended: yes
      register: new_deployment

    # Cleanup.
    - name: Remove old deployment if rollout is succeeded
      k8s:
        api_version: v1
        kind: Deployment
        name: "{{ old_deployment_name }}"
        namespace: "{{ meta.namespace }}"
        state: absent
      loop_control:
        loop_var: old_deployment_name
      loop: "{{ old_deployments_names }}"
      when: new_deployment is succeeded

    - name: Remove new deployment if rollout is failed
      k8s:
        api_version: v1
        kind: Deployment
        name: "{{ new_deployment_name }}"
        namespace: "{{ deployment.namespace }}"
        state: absent
      when: new_deployment is failed

  when: old_deployments_names
