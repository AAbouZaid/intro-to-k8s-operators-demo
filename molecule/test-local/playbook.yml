---

- name: Build Operator in Kubernetes docker container
  hosts: k8s
  vars:
    image_name: deployer-operator:testing

  tasks:
  # using command so we don't need to install any dependencies
  - name: Get existing image hash
    command: docker images -q {{ image_name }}
    register: prev_hash
    changed_when: false

  - name: Build Operator Image
    command: docker build -f /build/build/Dockerfile -t {{ image_name }} /build
    register: build_cmd
    changed_when: not prev_hash.stdout or (prev_hash.stdout and prev_hash.stdout not in ''.join(build_cmd.stdout_lines[-2:]))

- name: Converge
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    pull_policy: Never
    custom_resource_init: "{{ custom_resource_definition | from_yaml | combine({'spec': {'deployment': {'namespace': namespace, 'version': '1.7.7'}}}, recursive=True) }}"
    custom_resource: "{{ custom_resource_definition | from_yaml | combine({'spec': {'deployment': {'namespace': namespace, 'version': '1.7.8'}}}, recursive=True) }}"
  tasks:
  - block:
    - name: Delete the Operator Deployment
      k8s:
        state: absent
        namespace: '{{ namespace }}'
        definition: "{{ operator_definition }}"
      register: delete_deployment
      when: hostvars[groups.k8s.0].build_cmd.changed

    - name: Wait 30s for Operator Deployment to terminate
      k8s_info:
        api_version: '{{ definition.apiVersion }}'
        kind: '{{ definition.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ definition.metadata.name }}'
      vars:
        definition: "{{ operator_definition | from_yaml }}"
      register: deployment
      until: not deployment.resources
      delay: 3
      retries: 10
      when: delete_deployment.changed

    - name: Create the Operator Deployment
      k8s:
        namespace: '{{ namespace }}'
        definition: "{{ operator_definition }}"

    - name: Create the init deploy.example.com/v1alpha1.Deployer
      k8s:
        state: present
        namespace: '{{ namespace }}'
        definition: '{{ custom_resource_init }}'

    - name: Sleep till init version is deployed
      wait_for:
        timeout: 10

    - name: Create the deploy.example.com/v1alpha1.Deployer
      k8s:
        state: present
        namespace: '{{ namespace }}'
        definition: '{{ custom_resource }}'

    - name: Wait for reconciliation to run
      k8s_info:
        api_version: '{{ custom_resource.apiVersion }}'
        kind: '{{ custom_resource.kind }}'
        namespace: '{{ namespace }}'
        name: '{{ custom_resource.metadata.name }}'
      register: cr
      until:
      - "'Successful' in (cr | json_query('resources[].status.conditions[].reason'))"
      delay: 30
      retries: 10
    rescue:
    - name: debug cr
      ignore_errors: yes
      failed_when: false
      debug:
        var: debug_cr
      vars:
        debug_cr: '{{ lookup("k8s",
          kind=custom_resource.kind,
          api_version=custom_resource.apiVersion,
          namespace=namespace,
          resource_name=custom_resource.metadata.name
        )}}'

    - name: get operator logs
      ignore_errors: yes
      failed_when: false
      command: kubectl logs deployment/{{ definition.metadata.name }} -n {{ namespace }}
      environment:
        KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
      vars:
        definition: "{{ operator_definition | from_yaml }}"
      register: log

    - debug: var=log.stdout_lines

    - fail:
        msg: "Failed on action: converge"

- import_playbook: '{{ playbook_dir }}/../default/asserts.yml'
